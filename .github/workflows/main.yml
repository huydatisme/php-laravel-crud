name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: down (enable maintenance) or up (disable maintenance)'
        required: true
        type: choice
        options:
          - down
          - up
      maintenance_time:
        description: 'Set maintenance time text (used in maintenance message)'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  INSTANCE_NAME: Web Server
  BASTION_HOST_IP: 35.77.85.27

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Instance IPs
        id: get_instance_ips
        run: |
          echo "Fetching instance IDs for tag: Name=${INSTANCE_NAME}"
          INSTANCE_IDS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)

          if [ -z "$INSTANCE_IDS" ]; then
            echo "No instances found with name ${INSTANCE_NAME}"
            exit 1
          fi

          echo "Fetching private IPs for instances: $INSTANCE_IDS"
          INSTANCE_IPS=()
          for INSTANCE_ID in $INSTANCE_IDS; do
            INSTANCE_IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[*].Instances[*].PrivateIpAddress" \
              --output text)
            INSTANCE_IPS+=("$INSTANCE_IP")
          done

          INSTANCE_IPS_JOINED=$(IFS=,; echo "${INSTANCE_IPS[*]}")
          echo "INSTANCE_IPS=$INSTANCE_IPS_JOINED" >> $GITHUB_ENV
          echo "All Instance IPs: $INSTANCE_IPS_JOINED"

      - name: Set up SSH to bastion
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Update maintenance.php and set maintenance mode on all instances
        env:
          ACTION: ${{ github.event.inputs.action }}
          MAINTENANCE_TIME: ${{ github.event.inputs.maintenance_time }}
          BASTION_HOST_IP: ${{ env.BASTION_HOST_IP }}
          INSTANCE_IPS: ${{ env.INSTANCE_IPS }}
        run: |
          if [ -z "$INSTANCE_IPS" ]; then
            echo "No instance IPs found!"
            exit 1
          fi

          IFS=',' read -ra IP_ARRAY <<< "$INSTANCE_IPS"

          for INSTANCE_IP in "${IP_ARRAY[@]}"; do
            echo "Updating maintenance mode on instance with IP: ${INSTANCE_IP}"

            ssh -A -o StrictHostKeyChecking=no ubuntu@${BASTION_HOST_IP} << EOF
          echo "Connected to Bastion Host."
          ssh -i "Web_Server_key.pem" ubuntu@${INSTANCE_IP} << 'EC2EOF'
          if [ "\${ACTION}" == "down" ]; then
            echo "Setting maintenance mode down on \${INSTANCE_IP}"
            sudo sed -i "s/MAINTENANCE_TIME/${MAINTENANCE_TIME}/g" /var/www/php-laravel-crud/config/maintenance.php || exit 1
            sudo systemctl start nginx || exit 1
          elif [ "\${ACTION}" == "up" ]; then
            echo "Removing maintenance mode on \${INSTANCE_IP}"
            sudo systemctl stop nginx || exit 1
            sudo sed -i "s/${MAINTENANCE_TIME}/MAINTENANCE_TIME/g" /var/www/php-laravel-crud/config/maintenance.php || exit 1
          else
            echo "Invalid action: \${ACTION}"
            exit 1
          fi
          EC2EOF
          EOF
                      if [ $? -ne 0 ]; then
                        echo "Failed to update instance ${INSTANCE_IP}."
                        exit 1
                      fi
                    done
