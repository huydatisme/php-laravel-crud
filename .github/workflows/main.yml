name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: down (enable maintenance) or up (disable maintenance)'
        required: true
        type: choice
        options:
          - down
          - up
      maintenance_time:
        description: 'Set maintenance time text (used in maintenance message)'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  INSTANCE_NAME: Web Server
  BASTION_HOST_IP: 52.69.208.60

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Instance IPs
        id: get_instance_ips
        run: |
            # Lấy danh sách Instance IDs theo tag name
            INSTANCE_IDS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text)
  
              if [ -z "$INSTANCE_IDS" ]; then
                echo "No instances found with name ${INSTANCE_NAME}"
                exit 1
                fi
  
              # Lấy danh sách IP và ghi vào file instance_ips.txt
              echo "Getting IPs for instances: $INSTANCE_IDS"
              > instance_ips.txt
              for INSTANCE_ID in $INSTANCE_IDS; do
                INSTANCE_IP=$(aws ec2 describe-instances \
                  --instance-ids $INSTANCE_ID \
                  --query "Reservations[*].Instances[*].PrivateIpAddress" \
                  --output text)
                echo "$INSTANCE_IP" >> instance_ips.txt
              done
      
              echo "Instance IPs written to instance_ips.txt:"
              cat instance_ips.txt

      - name: Set up SSH to bastion
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Update maintenance.php and set maintenance mode on all instances
        env:
          ACTION: ${{ github.event.inputs.action }}
          MAINTENANCE_TIME: ${{ github.event.inputs.maintenance_time }}
          BASTION_HOST_IP: ${{ env.BASTION_HOST_IP }}
        run: |
          if [ ! -f instance_ips.txt ]; then
            echo "File instance_ips.txt not found!"
            exit 1
          fi

          INSTANCE_IPS=$(cat instance_ips.txt)
          IFS=$'\n' read -rd '' -a IP_ARRAY <<< "$INSTANCE_IPS"

          if [ ${#IP_ARRAY[@]} -eq 0 ]; then
            echo "No IPs found in the file."
            exit 1
          fi

          for INSTANCE_IP in "${IP_ARRAY[@]}"; do
            echo "Attempting SSH connection to Bastion Host..."
            ssh -A -o StrictHostKeyChecking=no ubuntu@${BASTION_HOST_IP} << EOF
              echo "Connected to Bastion Host."
              echo "Attempting SSH connection to EC2 instance ${INSTANCE_IP}..."
              ssh -i "Web_Server_key.pem" ubuntu@${INSTANCE_IP} << 'EC2EOF'
              
              echo "Connected to EC2 instance ${INSTANCE_IP}."

              if [ "${ACTION}" == "down" ]; then
                echo "Setting maintenance mode down..."
                sudo sed -i "s/MAINTENANCE_TIME/${MAINTENANCE_TIME}/g" /var/www/php-laravel-crud/config/maintenance.php
                sudo systemctl start nginx

              elif [ "${ACTION}" == "up" ]; then
                echo "Removing maintenance mode..."
                sudo systemctl stop nginx
                sudo sed -i "s/${MAINTENANCE_TIME}/MAINTENANCE_TIME/g" /var/www/php-laravel-crud/config/maintenance.php

              else
                echo "Invalid action: ${ACTION}"
                exit 1
              fi
              EC2EOF
            EOF
          done
