name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: down (enable maintenance) or up (disable maintenance)'
        required: true
        type: choice
        options:
          - down
          - up
      maintenance_time:
        description: 'Set maintenance time text (used in maintenance message)'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  INSTANCE_NAME: Web Server
  BASTION_HOST_IP: 35.77.85.27

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Instance IPs
        id: get_instance_ips
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ env.INSTANCE_NAME }}" --query "Reservations[*].Instances[*].InstanceId" --output text)
          INSTANCE_IPS=$(aws ec2 describe-instances --instance-ids $INSTANCE_IDS --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

          if [ -e "$INSTANCE_IPS" ]; then
            echo "No instances found with tag '${{ env.INSTANCE_NAME }}'."
            exit 1
          fi
           echo "Instance IPs found: ${INSTANCE_IPS}"
          # Ghi IP vào GITHUB_ENV với định dạng đúng
          IFS=' ' read -r -a IP_ARRAY <<< "$INSTANCE_IPS"
          for IP in "${IP_ARRAY[@]}"; do
            echo "INSTANCE_IP=${IP}" >> $GITHUB_ENV
          done

      - name: Set up SSH to bastion
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Update maintenance.php and set maintenance mode on all instances
        env:
          ACTION: ${{ github.event.inputs.action }}
          MAINTENANCE_TIME: ${{ github.event.inputs.maintenance_time }}
          BASTION_HOST_IP: ${{ env.BASTION_HOST_IP }}
        run: |
          IP_ARRAY=()
          while IFS= read -r line; do
            IP_ARRAY+=("$line")
          done < <(printenv | grep INSTANCE_IP= | cut -d '=' -f2)

          if [ ${#IP_ARRAY[@]} -eq 0 ]; then
            echo "No IPs found in the file."
            exit 1
          fi

          for INSTANCE_IP in "${IP_ARRAY[@]}"; do
            echo "Connecting to Bastion Host to manage instance ${INSTANCE_IP}..."

            ssh -A -o StrictHostKeyChecking=no ubuntu@${BASTION_HOST_IP} "bash -s" << EOF
              echo "Connected to Bastion Host. Managing instance ${INSTANCE_IP}..."
              ssh -i "Web_Server_key.pem" -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} "bash -s" << 'EC2EOF'
                echo "Connected to EC2 instance ${INSTANCE_IP}."

                if [ "${ACTION}" == "down" ]; then
                  echo "Setting maintenance mode down..."
                  sudo sed -i "s/MAINTENANCE_TIME/${MAINTENANCE_TIME}/g" /var/www/php-laravel-crud/config/maintenance.php || exit 1
                  sudo systemctl start nginx || exit 1

                elif [ "${ACTION}" == "up" ]; then
                  echo "Removing maintenance mode..."
                  sudo systemctl stop nginx || exit 1
                  sudo sed -i "s/${MAINTENANCE_TIME}/MAINTENANCE_TIME/g" /var/www/php-laravel-crud/config/maintenance.php || exit 1

                else
                  echo "Invalid action: ${ACTION}"
                  exit 1
                fi
              EC2EOF
            EOF

            if [ $? -ne 0 ]; then
              echo "Failed to manage instance ${INSTANCE_IP}."
              exit 1
            else
              echo "Successfully managed instance ${INSTANCE_IP}."
            fi
          done
