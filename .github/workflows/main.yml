name: Deploy to Server

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action: down (enable maintenance) or up (disable maintenance)'
        required: true
        type: choice
        options:
          - down
          - up
      maintenance_time:
        description: 'Set maintenance time text (used in maintenance message)'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  INSTANCE_NAME: Web Server
  BASTION_HOST_IP: 13.114.7.191

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Instance IPs
        id: get_instance_ips
        run: |
          INSTANCE_IDS=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Web Server" --query "Reservations[*].Instances[*].InstanceId" --output text)
          INSTANCE_IPS=$(aws ec2 describe-instances --instance-ids $INSTANCE_IDS --query "Reservations[*].Instances[*].PrivateIpAddress" --output text)

          echo "Instance IPs: ${INSTANCE_IPS}"

          # Set output with multiline-safe format
          echo "::set-output name=instance_ips::${INSTANCE_IPS}"
        outputs:
           instance_ips: ${{ steps.get_instance_ips.outputs.instance_ips }}

      - name: Set up SSH to bastion
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Update maintenance.php and set maintenance mode
        env:
          ACTION: ${{ github.event.inputs.action }}
          MAINTENANCE_TIME: ${{ github.event.inputs.maintenance_time }}
          BASTION_HOST_IP: ${{ env.BASTION_HOST_IP }}
          INSTANCE_IP: ${{env.INSTANCE_IP}}
        run: |
          ssh -A -o StrictHostKeyChecking=no ubuntu@${BASTION_HOST_IP} << EOF
            ssh -i "Web_Server_key.pem" ubuntu@${INSTANCE_IP} << 'EC2EOF'

            if [ "${ACTION}" == "down" ]; then
              sudo sed -i "s/MAINTENANCE_TIME/${MAINTENANCE_TIME}/g" /var/www/php-laravel-crud/config/maintenance.php
              sudo systemctl start nginx

            elif [ "${ACTION}" == "up" ]; then
              sudo systemctl stop nginx
              sudo sed -i "s/${MAINTENANCE_TIME}/MAINTENANCE_TIME/g" /var/www/php-laravel-crud/config/maintenance.php

            else
              echo "Invalid action: ${ACTION}"
              exit 1
            fi
          EOF
